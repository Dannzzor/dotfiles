{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Enhanced import": {
    "scope": "javascript,typescript,jsx,javascriptreact",
    "prefix": "impp",
    "body": ["import { $2 } from '$1';", "$3"],
    "description": "Create import in correct order, type path, then get autocomplete on the exported items"
  },
  "Tslint Ignore Next Line": {
    "scope": "javascript,typescript,jsx",
    "prefix": "tslintnextline",
    "body": "/* tslint:disable-next-line */",
    "description": "disable the next line from tslint"
  },
  "jasmine it should expand": {
    "scope": "javascript,typescript,jsx",
    "prefix": "itt",
    "body": ["it('$1', () => {", "  expect($2).toBeTruthy();", "});"],
    "description": "quickly expands itt to an it should jasmine test"
  },
  "jasmine entire test file": {
    "scope": "javascript,typescript,jsx,javascriptreact",
    "prefix": "testt",
    "body": [
      "import { ComponentFixture, TestBed } from '@angular/core/testing';",
      "import { By } from '@angular/platform-browser';",
      "import { DebugElement } from '@angular/core';",
      "",
      "import { $2 } from './$1';",
      "",
      "describe('$2', () => {",
      "  let comp: $2;",
      "  let fixture: ComponentFixture<$2>;",
      "  let de: DebugElement;",
      "  let el: HTMLElement;",
      "",
      "  beforeEach(() => {",
      "    TestBed.configureTestingModule({",
      "    declarations: [$2]",
      "  });",
      "",
      "  fixture = TestBed.createComponent($2);",
      "    comp = fixture.componentInstance;",
      "  });",
      "",
      "  it('should create a $2', () => {",
      "    expect(comp).toBeTruthy();",
      "  });",
      "",
      "  it('should create an element', () => {",
      "    fixture.detectChanges();",
      "    de = fixture.debugElement.query(By.css('h1'));",
      "    el = de.nativeElement;",
      "    expect(el.textContent).toContain('hello world');",
      "  });",
      "",
      "});",
      ""
    ],
    "description": "quickly expands testt to a full jasmine testbed"
  },
  "react base page": {
    "scope": "javascript,typescript,jsx",
    "prefix": "newpage",
    "body": [
      "import React, {Component} from 'react';",
      "",
      "import $1View from './$1View';",
      "",
      "export default class $1 extends Component {",
      "	_isMounted = false;",
      "	state = {}",
      "",
      "	safeSetState = (newState, callback) => {",
      "		if(this._isMounted) {",
      "			this.setState(newState, callback);",
      "		}",
      "	}",
      "",
      "	componentDidMount() {",
      "		this._isMounted = true;",
      "	}",
      "",
      "	componentWillUnmount() {",
      "		this._isMounted = false;",
      "	}",
      "	render() {",
      "		return (<$1View />);",
      "	}",
      "}"
    ],
    "description": "Quickly blast out a new page"
  },
  "react base view": {
    "scope": "javascript,typescript,jsx",
    "prefix": "newview",
    "body": [
      "import React, { Component } from 'react';",
      "import {format} from 'date-fns';",
      "import {SectionHeader, FeatureBadge, DataTableV2, FilterBox as UnwrappedFilterBox, withQueryParams} from '../../components/';",
      "import {numberWithCommas} from '../../utils';",
      "",
      "import './$1.css';",
      "",
      "const tableConfig = { columns: [ { name: 'Device Name', dataKey: 'device_name', description: \"The device's name\", }, { name: 'Risk Score', dataKey: 'risk_score', headerStyle: { textAlign: 'right' }, cellStyle: { textAlign: 'right' }, description: \"The combined risk scores fo the device's vulnerabilities\", formatter: (val, row) => numberWithCommas(val), }, { name: 'Last Scan', dataKey: 'last_scan_at', headerStyle: { textAlign: 'right' }, cellStyle: { textAlign: 'right' }, description: 'The time of the last vulnerability scan', formatter: (val, row) => format(val, 'M/D/YYYY'), type: 'date', }, ], };",
      "const filterCategories = [ { name: 'device_name', title: 'Device Name' }, ];",
      "const FilterBox = withQueryParams({ stripUnknownKeys: false, keys: { device_name: { default: undefined, validate: () => true, }, }, })(UnwrappedFilterBox);",
      "",
      "",
      "export default class $1 extends Component {",
      "	render() {",
      "		const {lastUpdated, tableData, filterCategories, handleFiltersUpdate, filteredData, isLoadingTable} = this.props;",
      "",
      "		return (",
      "		<div className=\"VulnerabilitiesView hasSectionHeader\">",
      "			<SectionHeader title={ <span> Vulnerabilities <FeatureBadge feature=\"vulnerabilities\" /> </span> } subtitleNonItalic={ lastUpdated ? `Last updated ${format(lastUpdated, 'M/DD/YY')} at ${format( lastUpdated, 'h:mm A')}` : null } />",
      "",
      "			<div className=\"chartRow\">{/* CHARTS HERE */}</div>",
      "			{tableData && ( <FilterBox page={window.location.pathname} filterCategories={filterCategories} data={tableData} onChange={handleFiltersUpdate} />)}",
      "			<DataTableV2 data={filteredData} defaultSort=\"risk_score\" defaultSortDirection=\"DESC\" searchColumns={['device_name', 'ip_address']} pageName=\"Seats\" columns={tableConfig.columns} isLoading={isLoadingTable} />",
      "		</div>",
      "		);",
      "	}",
      "}"
    ],
    "description": "Quickly blast out a portal view"
  },
  "react base component": {
    "scope": "javascript,typescript,jsx",
    "prefix": "newcomp",
    "body": [
      "import React from 'react';",
      "import { Card } from '../../components';",
      "",
      "const $1 = ({ data, isLoading, ...otherProps }) => (",
      "  <Card className=\"$2\" title=\"$3\" style={{ marginBottom: '2rem' }} emptyStateText=\"No $4 found.\" isEmpty={!data || !data.length} isLoading={isLoading} {...otherProps}>$5</Card>",
      ");",
      "",
      "export default $1;"
    ],
    "description": "Quickly blast out a base component"
  }
}
